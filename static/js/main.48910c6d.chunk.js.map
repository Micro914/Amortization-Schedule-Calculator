{"version":3,"sources":["components/BodyPage/BodyPageIndex.js","components/BodyPage/Header.js","logic/QuotingLogic.js","components/Quoting/Schedule.jsx","components/Quoting/Amortization.js","logic/Regex.js","components/Quoting/QuotingIndex.js","App.js","index.js"],"names":["BodyPage","props","className","title","style","margin","padding","orientation","component","Header","align","addMonth","d","index","period","currentDate","moment","nextMonthDate","add","futureMonth","futureMonthEnd","endOf","date","isSame","format","getYear","terms","Math","ceil","interestMonthly","interestRate","loanAmount","nf","toFixed","newPrincipal","monthlyPayment","principal","Schedule","loanTerm","inputs","result","newBalance","userAmount","Number","data","Intl","NumberFormat","balance","years","paymentMethod","monthlyRate","monthlyPrincipal","i","push","key","year","capital","capitalPayment","interest","nextPayment","paymentNumber","pagination","columns","dataIndex","responsive","dataSource","size","bordered","Amortization","Form","useForm","form","Option","Select","useState","dataArray","setDataArray","totalPayment","totalInterest","isResult","results","setResults","hideLoan","setHideLoan","hideInterest","setHideInterest","handleInputChange","event","name","target","value","handleSelectChange","console","log","layout","onFinish","values","match","Swal","fire","icon","text","term","calculatedInterest","calculatedPayments","x","pow","monthly","isFinite","calculateResults","onFinishFailed","errorInfo","validateMessages","required","types","email","number","range","marginTop","wrapperCol","span","labelCol","Item","label","rules","onSelect","placeholder","width","maxLength","onChange","suffix","PercentageOutlined","type","htmlType","Quoting","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48910c6d.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Divider, Col } from 'antd';\r\nimport './BodyPageStyle.scss'\r\n\r\nconst BodyPage = (props) => {\r\n    return (\r\n        <div className=\"segment mt-2\">\r\n            <Col><h1>{props.title}</h1></Col>\r\n            <Divider style={{ margin: 0, padding: 0 }} orientation=\"left\"></Divider>\r\n            {props.component}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BodyPage\r\n","import React from 'react'\r\nimport '../BodyPage/Header.scss';\r\nimport { Divider } from 'antd';\r\n\r\nconst Header = props => {\r\n    return (\r\n        <>\r\n            <div className=\"container segment\" align=\"center\">\r\n                <h1>{props.title}</h1>\r\n                <Divider className=\"hr-header\" orientation=\"left\"></Divider>\r\n            </div>            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import moment from 'moment';\r\n\r\nexport const calculateResults = ({loanAmount, loanTerm, interestRate, date, paymentMethod}) => {\r\n   let results=\"\"\r\n   let term = Number(paymentMethod)\r\n   const userAmount = Number(loanAmount);\r\n   const calculatedInterest = Number(interestRate) / 100 / term;\r\n   const calculatedPayments = Number(loanTerm) * term;\r\n   const x = Math.pow(1 + calculatedInterest, calculatedPayments);\r\n   const monthly = (userAmount * x * calculatedInterest) / (x - 1);\r\n\r\n   if (isFinite(monthly)) {\r\n     const monthlyPaymentCalculated = Number(monthly);\r\n     const totalPaymentCalculated = Number((monthly * calculatedPayments).toFixed(2));\r\n     const totalInterestCalculated = Number((monthly * calculatedPayments - userAmount).toFixed(2));\r\n\r\n//      // Set up results to the state to be displayed to the user\r\n        results= {\r\n        monthlyPayment: monthlyPaymentCalculated,\r\n        totalPayment: totalPaymentCalculated,\r\n        totalInterest: totalInterestCalculated,\r\n        isResult: true,\r\n        }\r\n   }\r\n   return results;\r\n    };\r\n\r\nexport const addMonth = (d,index, period) => {\r\n     let currentDate = moment(d);\r\n     let nextMonthDate = moment(d).add(1, 'months');\r\n     let futureMonth = moment(nextMonthDate).add((index)*(period), 'months');\r\n     let futureMonthEnd = moment(futureMonth).endOf('month');\r\n     \r\n     if(currentDate.date() !== futureMonth.date() && futureMonth.isSame(futureMonthEnd.format('YYYY-MM-DD'))) {\r\n         futureMonth = futureMonth.add(-1, 'd');\r\n     }\r\n     return futureMonth.format('MM-DD-YYYY')\r\n };\r\n\r\n export const getYear = (index, terms) => {\r\n    let period = (index+1) / terms\r\n    return Math.ceil(period)\r\n}\r\n\r\nexport const interestMonthly = (interestRate, loanAmount, nf) => {\r\n    let userAmount = loanAmount\r\n    let calculatedInterest = interestRate ;\r\n    let interestMonthly = ((userAmount * calculatedInterest)).toFixed(2);\r\n    return \"$\"+nf.format(interestMonthly)\r\n}\r\n\r\nexport const newPrincipal = (interestRate, loanAmount, monthlyPayment,nf) => {\r\n    let userAmount = loanAmount\r\n    let calculatedInterest = interestRate;\r\n    let interestMonthly = ((userAmount * calculatedInterest));\r\n    let principal = (monthlyPayment - interestMonthly).toFixed(2)\r\n    return \"$\"+(nf.format(principal))\r\n}","import React from 'react'\r\nimport { Table } from 'antd';\r\nimport { \r\n    addMonth, \r\n    getYear, \r\n    interestMonthly, \r\n    newPrincipal \r\n} from \"../../logic/QuotingLogic\"\r\n\r\nconst Schedule = ({ inputs, result }) => {\r\n    let totalPayments = (loanTerm, paymentMethod) =>  {\r\n        let years= loanTerm\r\n        let term = paymentMethod\r\n        return years * term \r\n    }\r\n\r\n    const newBalance = (loanAmount, nf) => {\r\n        let userAmount =  Number(loanAmount).toFixed(2);\r\n        return \"$\"+nf.format(userAmount);\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Payment No.',\r\n            key: 'paymentNumber',\r\n            dataIndex: 'paymentNumber',\r\n            responsive: ['md'],\r\n        },\r\n        {\r\n            title: 'Balance',\r\n            dataIndex: 'capital',\r\n            key: 'capital',\r\n        },\r\n        {\r\n            title: 'Principal',\r\n            dataIndex: 'capitalPayment',\r\n            key: 'capitalPayment',\r\n            responsive: ['md'],\r\n        },\r\n        {\r\n            title: 'P. Int',\r\n            key: 'interest',\r\n            dataIndex: 'interest',\r\n            responsive: ['md'],\r\n        },\r\n        {\r\n            title: 'Payment',\r\n            key: 'nextPayment',\r\n            dataIndex: 'nextPayment',\r\n        },\r\n        {\r\n            title: 'Year',\r\n            dataIndex: 'year',\r\n            key: 'year',\r\n            responsive: ['md'],\r\n            //   render: text => <a>{text}</a>,\r\n        },\r\n        {\r\n            title: 'Date',\r\n            key: 'date',\r\n            dataIndex: 'date',\r\n            responsive: ['sm'],\r\n        },\r\n    ];\r\n\r\n    const data = [];\r\n    let nf = new Intl.NumberFormat('en-US');\r\n    let balance=Number(inputs.loanAmount)\r\n    let date = inputs.date\r\n    let years = inputs.loanTerm\r\n    let terms = Number(inputs.paymentMethod)\r\n    let period = 12/terms\r\n    let monthlyRate=inputs.interestRate/100.00/terms;\r\n    let monthlyPayment = result.monthlyPayment\r\n    let interest = 0\r\n    let monthlyPrincipal= 0\r\n    for (let i = 0; i < totalPayments(years, terms); i++) {\r\n        interest=balance*monthlyRate\r\n        monthlyPrincipal=monthlyPayment-interest\r\n        data.push({\r\n            key: i,\r\n            year: getYear(i, terms),\r\n            capital: newBalance(balance, nf),\r\n            capitalPayment: newPrincipal(monthlyRate, balance, monthlyPayment, nf),\r\n            interest: interestMonthly(monthlyRate, balance, nf),\r\n            nextPayment: \"$\"+nf.format(monthlyPayment.toFixed(2)),\r\n            paymentNumber: i + 1,\r\n            date: addMonth(date, i, period)\r\n            \r\n        });\r\n        balance= balance-monthlyPrincipal\r\n    }\r\n    return (\r\n        <>\r\n            <Table pagination={false} columns={columns} dataSource={data} size=\"small\" bordered={true}  />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Schedule\r\n","import React, { useState } from 'react';\r\nimport { Form, Input, Button, DatePicker, Select } from 'antd';\r\nimport {\r\n    PercentageOutlined,\r\n} from '@ant-design/icons';\r\nimport { calculateResults } from \"../../logic/QuotingLogic\"\r\n// import { PDFViewer } from '@react-pdf/renderer'\r\n// import MyDocument from '../../components/PDFReact/PDFReact';\r\nimport { onlyNumbers,onlyNumbers2Digits } from '../../logic/Regex';\r\nimport \"./AmortizationStyle.scss\"\r\nimport moment from 'moment';\r\nimport Schedule from './Schedule';\r\nimport Swal from 'sweetalert2'\r\n\r\n\r\nconst Amortization = () => {\r\n    const [form] = Form.useForm();\r\n    const layout = \"horizontal\"\r\n    const { Option } = Select;\r\n    const dateFormat = 'MM/DD/YYYY';\r\n\r\n    let [dataArray, setDataArray] = useState({\r\n        date: \"\",\r\n        loanAmount: \"\",\r\n        paymentMethod: \"\",\r\n        loanTerm: \"\",\r\n        interestRate: \"\",\r\n    });\r\n\r\n    let [results, setResults] = useState({\r\n        monthlyPayment: '',\r\n        totalPayment: '',\r\n        totalInterest: '',\r\n        isResult: false,\r\n    });\r\n\r\n    let [hideLoan, setHideLoan] = useState(false)\r\n    let [hideInterest, setHideInterest] = useState(false)\r\n\r\n    // const Toogle = () => {\r\n    //     setHide(!hide)\r\n    // }\r\n    const onFinish = (values) => {\r\n        if (dataArray.loanAmount.match(onlyNumbers()) && dataArray.interestRate.match(onlyNumbers2Digits())) {\r\n            Swal.fire({\r\n                icon: 'success',\r\n                title: 'Success',\r\n                text: 'Data send correctly',\r\n            })\r\n            let result = calculateResults(dataArray)\r\n            setResults(result)\r\n            setHideLoan(hideLoan=false)\r\n            setHideInterest(hideInterest=false)\r\n            console.log(dataArray, \"Se transfirieron datos\")\r\n            \r\n        }\r\n        else {\r\n            if (!dataArray.loanAmount.match(onlyNumbers())) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Error',\r\n                    text: 'Input only positive numeric values bigger than 0',\r\n                })\r\n                setHideLoan(hideLoan=true)\r\n            }\r\n            else if (!dataArray.interestRate.match(onlyNumbers())||dataArray.interestRate>99){\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Error',\r\n                    text: 'Input only positive numeric values bigger than 0',\r\n                })\r\n                setHideInterest(hideInterest=true)\r\n            }\r\n\r\n        }\r\n    };\r\n    const handleInputChange = (event, name) => {\r\n            setDataArray(() => ({\r\n                ...dataArray = { // object that we want to update\r\n                    ...dataArray, // keep all other key-value pairs\r\n                    [name]: event.target.value  // update the value of specific key\r\n                }\r\n            }))\r\n            setResults(results=false)\r\n            return;\r\n    }\r\n    const handleSelectChange = (event, name) => {\r\n        if (name==='date') {\r\n            setDataArray(() => ({\r\n                ...dataArray = {\r\n                    ...dataArray,\r\n                    [name]: moment(event).format('YYYY-MM-DD')\r\n                }\r\n            }))\r\n            setResults(results=false)\r\n        }\r\n        else{\r\n            setDataArray(() => ({\r\n                ...dataArray = {\r\n                    ...dataArray,\r\n                    [name]: event\r\n                }\r\n            }))\r\n            setResults(results=false)\r\n        }\r\n        console.log(dataArray)\r\n        // console.log(dataArray.date, moment(dataArray.date).format('DD/MM/YYYY') )\r\n        return;\r\n    }\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        Swal.fire({\r\n            icon: 'error',\r\n            title: 'Error',\r\n            text: \"Can not send empty values\",\r\n        })\r\n        setHideInterest(hideInterest=false)\r\n    };\r\n\r\n    /* eslint-disable no-template-curly-in-string */\r\n\r\n    const validateMessages = {\r\n        required: '${label} is required!',\r\n        types: {\r\n            email: '${label} is not a valid e-mail!',\r\n            number: '${label} is not a valid number!',\r\n        },\r\n        number: {\r\n            range: '${label} must be between ${min} and ${max}',\r\n        },\r\n    };\r\n    return (\r\n        <>\r\n            <Form\r\n                layout={layout}\r\n                form={form}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                validateMessages={validateMessages}\r\n                style={{ marginTop: '12px' }}\r\n                wrapperCol={{\r\n                    span: 8,\r\n                }}\r\n                labelCol={{\r\n                    span: 8,\r\n                }}\r\n            >\r\n                <Form.Item name={['table', 'date']} label=\"Date\" rules={[{ required: true }]}>\r\n                    <DatePicker onSelect={(event, name) => handleSelectChange(event, name = 'date')} placeholder=\"MM-DD-YYYY\" style={{ width: '100%' }} format={dateFormat} />\r\n                </Form.Item>\r\n                <Form.Item name={['table', 'loanAmount']} label=\"Mortgage amount:\" rules={[{ required: true }]}>\r\n                    <Input maxLength={9} onChange={(event, name) => handleInputChange(event, name = 'loanAmount')} placeholder=\"Escriba el monto total\" />\r\n                </Form.Item>\r\n                {hideLoan?<span className=\"no-valid\"></span>:\"\"}\r\n                <Form.Item name={['table', 'paymentMethod']} label=\"Frequency :\" rules={[{ required: true }]}>\r\n                    <Select onSelect={(event, name) => handleSelectChange(event, name = \"paymentMethod\")} placeholder=\"Select the frequency payment\">\r\n                        <Option value=\"12\">Monthly</Option>\r\n                        <Option value=\"4\">Quarterly</Option>\r\n                        <Option value=\"2\">Biannual</Option>\r\n                        <Option value=\"1\">Yearly</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={['table', 'loanTerm']} label=\"Mortgage term in years\" rules={[{ required: true }]}>\r\n                    <Select onSelect={(event, name) => handleSelectChange(event, name = 'loanTerm')} placeholder=\"Select a year\">\r\n                        <Option value=\"1\">1 Year</Option>\r\n                        <Option value=\"2\">2 Years</Option>\r\n                        <Option value=\"3\">3 Years</Option>\r\n                        <Option value=\"4\">4 Years</Option>\r\n                        <Option value=\"5\">5 Years</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={['table', 'interestRate']} label=\"Interest rate per year\" rules={[{ required: true }]}>\r\n                    <Input maxLength={2} suffix={<PercentageOutlined />} onChange={(event, name) => handleInputChange(event, name = 'interestRate')} placeholder=\"Write the Interest rate per year\" />\r\n                </Form.Item>\r\n                {(hideInterest)||dataArray.interestRate>99?<span className=\"no-valid\"></span>:\"\"}\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">Calculate</Button>\r\n                </Form.Item>\r\n            </Form>\r\n            {/* <PDFDownloadLink document={<MyDocument table={number} />} fileName=\"somename.pdf\">\r\n                {({ blob, url, loading, error }) => (loading ? 'Loading document...' : <Button type=\"primary\" htmlType=\"submit\">Previsualizar Tabla</Button>)}\r\n            </PDFDownloadLink> */}\r\n\r\n            {\r\n                results.isResult ? (\r\n                    <Schedule inputs={dataArray} result={results}/>\r\n                ) : (\r\n                    <span>{\"\"}</span>\r\n                )\r\n            }\r\n\r\n\r\n            {/* {hide ? <Button type=\"primary\" onClick={Toogle} >Esconder Tabla</Button> : <Button type=\"primary\" onClick={Toogle} >Previsualizar Tabla</Button>}\r\n\r\n            {(hide) ? <PDFViewer style={{ width: '100%', height: '600px' }}>\r\n                <MyDocument table={dataArray} />\r\n            </PDFViewer> : \"\"} */}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Amortization\r\n","export const onlyNumbers= () => \"^[1-9][0-9]*$\"\r\nexport const onlyNumbers2Digits= () => \"^[1-9][0-9]{0,1}$\"\r\n","import React from 'react'\r\nimport BodyPage from '../BodyPage/BodyPageIndex';\r\nimport Header from '../BodyPage/Header'\r\nimport Amortization from './Amortization';\r\n\r\nconst Quoting = () => {\r\n    return (\r\n        <div>\r\n            <Header title={\"AMORTIZATION SCHEDULE CALCULATOR\"}/>\r\n            <BodyPage title={\"INPUT THE CORRECT DATA\"} component={<Amortization />}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Quoting\r\n","import React from \"react\";\nimport Quoting from \"./components/Quoting/QuotingIndex\";\n\nfunction App() {\n  return (\n    <div>\n      <Quoting/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}